openapi: 3.1.0
info:
  contact: {}
  title: Bitcoin cash
  version: 3.9.3
  x-logo:
    url: 'https://tatum.io/images/logo.svg'
    altText: Tatum
  description: |-
                        <p>Bitcoin Cash Blockchain enables access to the most commonly used Bitcoin Cash methods. These methods bring a small level of abstraction
                        and are used for applications that communicate with the blockchain directly. Some of the methods are used alongside Tatum Private Ledger
                        to connect the blockchain and the private ledger, like wallet generation or getting information about transactions.<br/>
                        Tatum supports 2 chains:
                          <ul><li>Mainnet - a regular live chain</li>
                          <li>Testnet - a chain used for testing purposes. Coins on the test chain have no value and can be obtained from a faucet, e.g. <a target="_blank" href="https://faucet.fullstack.cash/">https://faucet.fullstack.cash/</a></li></ul>
                          </ul>
                        Tatum supports BIP44 HD wallets. Because they can generate 2^31 addresses from 1 mnemonic phrase, they are very convenient and secure. It is possible to generate this type of wallet with 1 simple API call.</p>
servers:
  - url: 'https://api-eu1.tatum.io'
  - url: 'https://api-us-west1.tatum.io'
tags:
  - description: ''
    name: Account
  - description: ''
    name: Block
  - description: ''
    name: Transaction
paths:
  /v3/bcash/wallet:
    get:
      description: |
        <h4>5 credits per API call.</h4><br/><p>Tatum supports BIP44 HD wallets. It is very convenient and secure, since it can generate 2^31 addresses from 1 mnemonic phrase. Mnemonic phrase consists of 24 special words in defined order and can restore access to all generated addresses and private keys.<br/>Each address is identified by 3 main values:<ul><li>Private Key - your secret value, which should never be revealed</li><li>Public Key - public address to be published</li><li>Derivation index - index of generated address</li></ul></p><p>Tatum follows BIP44 specification and generates for Bitcoin Cash wallet with derivation path m'/44'/145'/0'/0. More about BIP44 HD wallets can be found here - <a target="_blank" href="https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki">https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki</a>.
        Generate BIP44 compatible Bitcoin Cash wallet.</p>
      operationId: BchGenerateWallet
      summary: Generate Bitcoin Cash wallet
      tags:
        - Account
      parameters:
        - description: Mnemonic to use for generation of extended public and private keys.
          in: query
          name: mnemonic
          required: false
          schema:
            type: string
            maxLength: 500
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request. Validation failed for the given object in the HTTP Body or Request parameters.
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Error401NotActive'
                  - $ref: '#/components/schemas/Error401Invalid'
          description: Unauthorized. Not valid or inactive subscription key present in the HTTP Header.
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal server error. There was an error on the server while processing the request.
      security:
        - X-Api-Key: []
  /v3/bcash/info:
    get:
      description: '<h4>5 credits per API call.</h4><br/><p>Get Bitcoin Cash Blockchain Information. Obtain basic info like testnet / mainnet version of the chain, current block number and it''s hash.</p>'
      operationId: BchGetBlockChainInfo
      summary: Get Bitcoin Cash Blockchain Information
      tags:
        - Block
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BchInfo'
          description: OK
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Error401NotActive'
                  - $ref: '#/components/schemas/Error401Invalid'
          description: Unauthorized. Not valid or inactive subscription key present in the HTTP Header.
        '403':
          description: 'Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403BtcBlockchain'
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal server error. There was an error on the server while processing the request.
      security:
        - X-Api-Key: []
  '/v3/bcash/block/hash/{i}':
    get:
      description: <h4>5 credits per API call.</h4><br/><p>Get Bitcoin Cash Block hash. Returns hash of the block to get the block detail.</p>
      operationId: BchGetBlockHash
      summary: Get Bitcoin Cash Block hash
      tags:
        - Block
      parameters:
        - description: The number of blocks preceding a particular block on a block chain.
          in: path
          name: i
          required: true
          schema:
            type: number
            example: 1580117
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  hash:
                    type: string
                    description: Block hash
                    example: 0000000053f225e202cf27fe3046e06719efd3b31b5ab75fc5ef7f853c8b246f
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request. Validation failed for the given object in the HTTP Body or Request parameters.
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Error401NotActive'
                  - $ref: '#/components/schemas/Error401Invalid'
          description: Unauthorized. Not valid or inactive subscription key present in the HTTP Header.
        '403':
          description: 'Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403BtcBlockchain'
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal server error. There was an error on the server while processing the request.
      security:
        - X-Api-Key: []
  '/v3/bcash/block/{hash}':
    get:
      description: <h4>5 credits per API call.</h4><br/><p>Get Bitcoin Cash Block detail by block hash or height.</p>
      operationId: BchGetBlock
      summary: Get Bitcoin Cash Block by hash
      tags:
        - Block
      parameters:
        - description: Block hash or height
          in: path
          name: hash
          required: true
          schema:
            type: string
            example: 00000000000000cfb22714715f09b3721f89819a325f7f4d39b2c22a061d1be8
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BchBlock'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request. Validation failed for the given object in the HTTP Body or Request parameters.
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Error401NotActive'
                  - $ref: '#/components/schemas/Error401Invalid'
          description: Unauthorized. Not valid or inactive subscription key present in the HTTP Header.
        '403':
          description: 'Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403BtcBlockchain'
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal server error. There was an error on the server while processing the request.
      security:
        - X-Api-Key: []
  '/v3/bcash/transaction/{hash}':
    get:
      description: <h4>5 credits per API call.</h4><br/><p>Get Bitcoin Cash Transaction by transaction hash.</p>
      operationId: BchGetRawTransaction
      summary: Get Bitcoin Cash Transaction by hash
      tags:
        - Transaction
      parameters:
        - description: Transaction hash
          in: path
          name: hash
          required: true
          schema:
            type: string
            example: 1451692ebbfbea1a2d2ec6fe6782596b6aa2e46c0589d04c406f491b5b46bc6a
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BchTx'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request. Validation failed for the given object in the HTTP Body or Request parameters.
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Error401NotActive'
                  - $ref: '#/components/schemas/Error401Invalid'
          description: Unauthorized. Not valid or inactive subscription key present in the HTTP Header.
        '403':
          description: 'Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403BtcBlockchain'
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal server error. There was an error on the server while processing the request.
      security:
        - X-Api-Key: []
  '/v3/bcash/transaction/address/{address}':
    get:
      description: <h4>5 credits per API call.</h4><br/><p>Get Bitcoin Cash Transaction by address. Limit is 50 transaction per response.</p>
      operationId: BchGetTxByAddress
      summary: Get Bitcoin Cash Transactions by address
      tags:
        - Transaction
      parameters:
        - description: Address
          in: path
          name: address
          required: true
          schema:
            type: string
            example: 2MsM67NLa71fHvTUBqNENW15P68nHB2vVXb
        - description: 'Define, how much transactions should be skipped to obtain another page.'
          in: query
          name: skip
          required: false
          schema:
            type: integer
            example: 2
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/BchTx'
                type: array
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request. Validation failed for the given object in the HTTP Body or Request parameters.
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Error401NotActive'
                  - $ref: '#/components/schemas/Error401Invalid'
          description: Unauthorized. Not valid or inactive subscription key present in the HTTP Header.
        '403':
          description: 'Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403BtcBlockchain'
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal server error. There was an error on the server while processing the request.
      security:
        - X-Api-Key: []
  '/v3/bcash/address/{xpub}/{index}':
    get:
      description: |
        <h4>5 credits per API call.</h4><br/>
        <p>Generate Bitcoin Cash deposit address from Extended public key. Deposit address is generated for the specific index - each extended public key can generate
        up to 2^31 addresses starting from index 0 until 2^31 - 1. Generates new format of address starting with bitcoincash: in case of mainnet, bchtest: in case of testnet..</p>
      operationId: BchGenerateAddress
      summary: Generate Bitcoin Cash deposit address from Extended public key
      tags:
        - Account
      parameters:
        - description: Extended public key of wallet.
          in: path
          name: xpub
          required: true
          example: xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid
          schema:
            type: string
        - description: Derivation index of desired address to be generated.
          in: path
          name: index
          required: true
          example: 0
          schema:
            type: number
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  address:
                    type: string
                    description: Bitcoin Cash address
                    example: 'bitcoincash:qrd9khmeg4nqag3h5gzu8vjt537pm7le85lcauzezc'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request. Validation failed for the given object in the HTTP Body or Request parameters.
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Error401NotActive'
                  - $ref: '#/components/schemas/Error401Invalid'
          description: Unauthorized. Not valid or inactive subscription key present in the HTTP Header.
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal server error. There was an error on the server while processing the request.
      security:
        - X-Api-Key: []
  /v3/bcash/wallet/priv:
    post:
      description: |
        <h4>5 credits per API call.</h4><br/>
        <p>Generate private key for address from mnemonic for given derivation path index. Private key is generated for the specific index - each mnemonic
        can generate up to 2^32 private keys starting from index 0 until 2^31 - 1.</p>
      operationId: BchGenerateAddressPrivateKey
      summary: Generate Bitcoin Cash private key
      tags:
        - Account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrivKeyRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivKey'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request. Validation failed for the given object in the HTTP Body or Request parameters.
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Error401NotActive'
                  - $ref: '#/components/schemas/Error401Invalid'
          description: Unauthorized. Not valid or inactive subscription key present in the HTTP Header.
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal server error. There was an error on the server while processing the request.
      security:
        - X-Api-Key: []
  /v3/bcash/transaction:
    post:
      description: |
        <h4>10 credits per API call.</h4><br/>
        <p>Send Bitcoin Cash to blockchain addresses. It is possible to build a blockchain transaction in 1 way:
        <ul>
        <li><b>fromUTXO</b> - assets will be sent from the list of unspent UTXOs. Each of the UTXO will be included in the transaction.</li>
        </ul>
        In bitcoin-like blockchains, transaction is created from the list of previously not spent UTXO. Every UTXO contains amount of funds, which can be spent.
        When the UTXO enters into the transaction, the whole amount is included and must be spent. For example, address A receives 2 transactions, T1 with 1 BCH and T2 with 2 BCH.
        The transaction, which will consume UTXOs for T1 and T2, will have available amount to spent 3 BCH = 1 BCH (T1) + 2 BCH(T2).<br/><br/>
        There can be multiple recipients of the transactions, not only one. In the <b>to</b> section, every recipient address has it's corresponding amount.
        When the amount of funds, that should receive the recipient is lower than the amount of funds from the UTXOs, the difference is used as a transaction fee.<br/><br/>
        This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key.
        No one should ever send it's own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey
        or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production,
        <a href="https://github.com/tatumio/tatum-kms" target="_blank">Tatum KMS</a> should be used for the highest security standards, and signatureId should be present in the request.
        Alternatively, using the Tatum client library for supported languages.
        </p>
      operationId: BchTransferBlockchain
      summary: Send Bitcoin Cash to blockchain addresses
      tags:
        - Transaction
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/BchTransaction'
                - $ref: '#/components/schemas/BchTransactionKMS'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/TransactionHashKMS'
                  - $ref: '#/components/schemas/SignatureId'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request. Validation failed for the given object in the HTTP Body or Request parameters.
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Error401NotActive'
                  - $ref: '#/components/schemas/Error401Invalid'
          description: Unauthorized. Not valid or inactive subscription key present in the HTTP Header.
        '403':
          description: 'Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.'
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Error403BtcTx'
                  - $ref: '#/components/schemas/Error403Broadcast'
                  - $ref: '#/components/schemas/Error403BtcBlockchain'
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal server error. There was an error on the server while processing the request.
      security:
        - X-Api-Key: []
  /v3/bcash/broadcast:
    post:
      description: |
        <h4>5 credits per API call.</h4><br/>
        <p>Broadcast signed transaction to Bitcoin Cash blockchain. This method is used internally from Tatum KMS, Tatum Middleware or Tatum client libraries.
        It is possible to create custom signing mechanism and use this method only for broadcasting data to the blockchian.</p>
      operationId: BchBroadcast
      summary: Broadcast signed Bitcoin Cash transaction
      tags:
        - Transaction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BroadcastKMS'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionHashKMS'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request. Validation failed for the given object in the HTTP Body or Request parameters.
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Error401NotActive'
                  - $ref: '#/components/schemas/Error401Invalid'
          description: Unauthorized. Not valid or inactive subscription key present in the HTTP Header.
        '403':
          description: 'Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.'
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Error403BtcBlockchain'
                  - $ref: '#/components/schemas/Error403Broadcast'
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal server error. There was an error on the server while processing the request.
      security:
        - X-Api-Key: []
  /v3/bcash/node:
    post:
      description: |
        <h4>2 credits per API call.</h4><br/>
        Use this endpoint URL as an http-based JSON RPC driver to connect directly to the node provided by Tatum. <br/>
        To learn more about JSON RPC, please visit <a href=\"https://developer.bitcoin.org/reference/rpc/index.html\" target=\"_blank\">Bitcoin developers' guide.</a>
      operationId: BzcRpcDriver
      summary: JSON RPC HTTP Driver
      tags:
        - Transaction
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: Any valid JSON RPC method content body. description.
              properties:
                jsonrpc:
                  type: integer
                  description: Version of the JSON RPC.
                  example: 1.0
                id:
                  type: string
                  description: ID of the request, could be any arbitrary identifier.
                  example: "test"
                method:
                  type: string
                  description: "Method to invoke on the note."
                  example: "getblockcount"
                params:
                    type: array
                    description: "Params to the method call, if required."
                    example: []
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                description: "Any valid RPC response."
                example:
                  jsonrpc: 1.0
                  id: "test"
                  result: 654321
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request. Validation failed for the given object in the HTTP Body or Request parameters.
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Error401NotActive'
                  - $ref: '#/components/schemas/Error401Invalid'
          description: Unauthorized. Not valid or inactive subscription key present in the HTTP Header.
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal server error. There was an error on the server while processing the request.
      security:
        - X-Api-Key: []
components:
  schemas:
    BchBlock:
      type: object
      properties:
        hash:
          type: string
          description: Hash of block.
          example: 000000000000000005e14d3f9fdfb70745308706615cfa9edca4f4558332b201
        size:
          type: number
          description: Block size.
          example: 81577
        height:
          type: number
          description: The number of blocks preceding a particular block on a block chain.
          example: 500000
        version:
          type: number
          description: Block version.
          example: 536870912
        merkleroot:
          type: string
          description: 'The root node of a merkle tree, a descendant of all the hashed pairs in the tree.'
          example: 4af279645e1b337e655ae3286fc2ca09f58eb01efa6ab27adedd1e9e6ec19091
        tx:
          type: array
          description: List of transactions present in the block.
          items:
            $ref: '#/components/schemas/BchTx'
        time:
          type: number
          description: Time of the block.
          example: 1509343584
        nonce:
          type: number
          description: Arbitrary number that is used in Bitcoin's proof of work consensus algorithm.
          example: 3604508752
        difficulty:
          type: number
          example: 113081236211.45331
        confirmations:
          type: number
          description: Number of blocks mined after this block.
          example: 109602
        previousblockhash:
          type: string
          description: Hash of the previous block.
          example: 0000000000000000043831d6ebb013716f0580287ee5e5687e27d0ed72e6e523
        nextblockhash:
          type: string
          description: Hash of the next block.
          example: 00000000000000000568f0a96bf4348847bc84e455cbfec389f27311037a20f3
    BchInfo:
      type: object
      properties:
        chain:
          type: string
          description: 'Chain of the blockchain, main or test.'
          example: main
        blocks:
          type: number
          description: Last block.
          example: 609604
        bestblockhash:
          type: string
          description: Hash of the last block.
          example: 0000000000000000024997c878c5a90bd73cd50060877c4f70eef1f2e92243f5
        difficulty:
          type: number
          description: Difficulty of the PoW algorithm.
          example: 375206303347.133
    BchTransaction:
      type: object
      required:
        - to
        - fromUTXO
      properties:
        fromUTXO:
          description: 'Array of transaction hashes, index of UTXO in it and corresponding private keys. Use this option if you want to calculate amount to send manually. Either fromUTXO or fromAddress must be present.'
          type: array
          items:
            type: object
            required:
              - txHash
              - index
              - privateKey
            properties:
              txHash:
                description: Transaction hash of the UTXO to be spent.
                type: string
                example: 53faa103e8217e1520f5149a4e8c84aeb58e55bdab11164a95e69a8ca50f8fcc
                minLength: 64
                maxLength: 64
              index:
                description: Index of the UTXO to be spent.
                type: number
                example: 0
                minimum: 0
                maximum: 2147483647
              privateKey:
                description: 'Private key of the UTXO to be spent. Private key, or signature Id must be present.'
                type: string
                example: cVX7YtgL5muLTPncHFhP95oitV1mqUUA5VeSn8HeCRJbPqipzobf
                minLength: 52
                maxLength: 52
        to:
          description: Array of addresses and values to send bitcoins to. Values must be set in BCH. Difference between from and to is transaction fee.
          type: array
          items:
            type: object
            required:
              - address
              - value
            properties:
              address:
                description: Destination address.
                type: string
                example: 'bitcoincash:qrd9khmeg4nqag3h5gzu8vjt537pm7le85lcauzez'
                minimum: 30
                maximum: 60
              value:
                description: 'Amount to be sent, in BCH.'
                type: number
                minimum: 0
                example: 0.02969944
    BchTransactionKMS:
      type: object
      required:
        - to
        - fromUTXO
      properties:
        fromUTXO:
          description: 'Array of transaction hashes, index of UTXO in it and corresponding private keys. Use this option if you want to calculate amount to send manually. Either fromUTXO or fromAddress must be present.'
          type: array
          items:
            type: object
            required:
              - txHash
              - index
              - signatureId
            properties:
              txHash:
                description: Transaction hash of the UTXO to be spent.
                type: string
                example: 53faa103e8217e1520f5149a4e8c84aeb58e55bdab11164a95e69a8ca50f8fcc
                minLength: 64
                maxLength: 64
              index:
                description: Index of the UTXO to be spent.
                type: number
                example: 0
                minimum: 0
                maximum: 2147483647
              signatureId:
                type: string
                minimum: 36
                maximum: 36
                format: uuid
                example: 1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6
                description: 'Identifier of the private key associated in signing application. Private key, or signature Id must be present.'
        to:
          description: Array of addresses and values to send bitcoins to. Values must be set in BCH. Difference between from and to is transaction fee.
          type: array
          items:
            type: object
            required:
              - address
              - value
            properties:
              address:
                description: Destination address.
                type: string
                example: 'bitcoincash:qrd9khmeg4nqag3h5gzu8vjt537pm7le85lcauzez'
                minimum: 30
                maximum: 60
              value:
                description: 'Amount to be sent, in BCH.'
                type: number
                minimum: 0
                example: 0.02969944
    BchTx:
      type: object
      properties:
        txid:
          type: string
          example: fe28050b93faea61fa88c4c630f0e1f0a1c24d0082dd0e10d369e13212128f33
        version:
          type: number
          example: 1
        locktime:
          type: number
          example: 0
        vin:
          type: array
          items:
            type: object
            properties:
              txid:
                type: string
                example: eea57285462dd70dadcd431fc814857b3f81fe4d0a059a8c02c12fd7d33c02d1
              vout:
                type: number
                example: 0
              scriptSig:
                properties:
                  hex:
                    type: string
                    example: 48304502210083753ff9954579f1062d60905650d5d07f50dedc96f9425403b80957f199e1ee022053625597b069c48ed29f8825bd3c8f66757ccaa21a7bb49314eae4eca1fb8d7041210299b1eedeb115b5880cd5e0df0717bd982748a8e003e34371dc36301e17ee0ed6
                  asm:
                    type: string
                    example: '304502210083753ff9954579f1062d60905650d5d07f50dedc96f9425403b80957f199e1ee022053625597b069c48ed29f8825bd3c8f66757ccaa21a7bb49314eae4eca1fb8d70[ALL|FORKID] 0299b1eedeb115b5880cd5e0df0717bd982748a8e003e34371dc36301e17ee0ed6'
                type: object
              coinbase:
                type: string
                example: 04ffff001d02fd04
              sequence:
                type: number
                example: 2147483647
        vout:
          type: array
          items:
            type: object
            properties:
              value:
                type: string
                example: '50.00000000'
              'n':
                type: number
                example: 0
              scriptPubKey:
                properties:
                  hex:
                    type: string
                    example: 4104f5eeb2b10c944c6b9fbcfff94c35bdeecd93df977882babc7f3a2cf7f5c81d3b09a68db7f0e04f21de5d4230e75e6dbe7ad16eefe0d4325a62067dc6f369446aac
                  asm:
                    type: string
                    example: 04f5eeb2b10c944c6b9fbcfff94c35bdeecd93df977882babc7f3a2cf7f5c81d3b09a68db7f0e04f21de5d4230e75e6dbe7ad16eefe0d4325a62067dc6f369446a OP_CHECKSIG
                  addresses:
                    type: array
                    items:
                      type: string
                    example:
                      - 1BW18n7MfpU35q4MTBSk8pse3XzQF8XvzT
                  type:
                    type: string
                    example: pubkeyhash
                type: object
    BroadcastKMS:
      properties:
        txData:
          description: Raw signed transaction to be published to network.
          example: 62BD544D1B9031EFC330A3E855CC3A0D51CA5131455C1AB3BCAC6D243F65460D
          maxLength: 500000
          minLength: 1
          type: string
        signatureId:
          description: 'ID of prepared payment template to sign. Required only, when broadcasting transaction signed by Tatum KMS.'
          format: uuid
          example: 1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6
          type: string
          minLength: 36
          maxLength: 36
      required:
        - txData
      type: object
    PrivKey:
      type: object
      properties:
        key:
          description: Generated private key.
          example: cTmS2jBWXgFaXZ2xG9jhn67TiyTshnMp3UedamzEhGm6BZV1vLgQ
          type: string
    PrivKeyRequest:
      type: object
      properties:
        index:
          description: Derivation index of private key to generate.
          example: 0
          maximum: 2147483647
          type: integer
        mnemonic:
          maxLength: 500
          minLength: 1
          description: Mnemonic to generate private key from.
          example: urge pulp usage sister evidence arrest palm math please chief egg abuse
          type: string
      required:
        - mnemonic
        - index
    SignatureId:
      type: object
      properties:
        signatureId:
          format: uuid
          description: 'ID of prepared payment template to sign. This is should be stored on a client side to retrieve ID of the blockchain transaction, when signing application signs the transaction and broadcasts it to the blockchain.'
          example: 1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6
          type: string
      required:
        - signatureId
    TransactionHashKMS:
      type: object
      properties:
        txId:
          description: TX hash of successful transaction.
          example: c83f8818db43d9ba4accfe454aa44fc33123d47a4f89d47b314d6748eb0e9bc9
          type: string
        failed:
          description: 'In case of the transaction was broadcast to the blockchain, but it was not possible to complete Tatum KMS signature, reponse is marked as failed and must be marked manually.'
          example: false
          type: boolean
      required:
        - txId
    Wallet:
      type: object
      properties:
        address:
          maxLength: 58
          minLength: 58
          description: address of Algorand account.
          example: NTAESFCB3WOD7SAOL42KSPVARLB3JFA3MNX3AESWHYVT2RMYDVZI6YLG4Y
          type: string
        secret:
          maxLength: 103
          minLength: 103
          description: 'secretKey can generate Mnemonic, similar to private Key.'
          type: string
          example: NBYMCVEEDFYV3TPWVRE6APE7PKHUJD4XAKXCKNCLKGUXOC3LFNJGZQCJCRA53HB7ZAHF6NFJH2QIVQ5USQNWG35QCJLD4KZ5IWMB24Q
    Error400:
      properties:
        errorCode:
          example: validation.failed
          description: validation.failed
          type: string
        message:
          example: Request validation failed. Please see data for additional information.
          description: Request validation failed. Please see data for additional information.
          type: string
        statusCode:
          example: 400
          description: '400'
          type: number
        data:
          type: array
          items:
            type: object
            required:
              - target
            properties:
              target:
                type: object
                additionalProperties: true
                description: Request object present in the body of the HTTP request
              value:
                type: number
                description: 'Value of the target object which validation is wrong. Can be of any data type, example here is using type number.'
                example: 12345
              property:
                type: string
                description: Property name of the target object which validation is wrong
                example: fromPrivateKey
              constraints:
                type: object
                additionalProperties: true
                description: 'Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.'
                example:
                  isNotEmpty: fromPrivateKey should not be empty
    Error401Invalid:
      properties:
        errorCode:
          example: subscription.invalid
          description: subscription.invalid
          type: string
        message:
          example: 'Unable to find valid subscription for ''${apiKey}'''
          description: 'Unable to find valid subscription for ''${apiKey}'''
          type: string
        statusCode:
          example: 401
          description: '401'
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error401NotActive:
      properties:
        errorCode:
          example: subscription.not.active
          description: subscription.not.active
          type: string
        message:
          example: Subscription not active anymore.
          description: Subscription not active anymore.
          type: string
        statusCode:
          example: 401
          description: '401'
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403Broadcast:
      properties:
        errorCode:
          description: blockchain.broadcast.error
          example: blockchain.broadcast.error
          type: string
        message:
          description: 'Unable to broadcast transaction, wrong input data.'
          example: 'Unable to broadcast transaction, wrong input data.'
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403BtcBlockchain:
      properties:
        errorCode:
          description: blockchain.error.code
          example: blockchain.error.code
          type: string
        message:
          description: '${error.message} Code: ${error.code}'
          example: '${error.message} Code: ${error.code}'
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403BtcTx:
      properties:
        errorCode:
          description: transaction.invalid.body
          example: transaction.invalid.body
          type: string
        message:
          description: 'Either UTXO, or addresses must be present.'
          example: 'Either UTXO, or addresses must be present.'
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error500:
      properties:
        message:
          example: Internal server error
          description: Internal server error
          type: string
        statusCode:
          example: 500
          description: '500'
          type: number
        errorCode:
          example: internal.error
          description: Internal server error
          type: string
      required:
        - statusCode
        - message
      type: object
  securitySchemes:
    X-Api-Key:
      description: |
        To maintain the highest security level, Tatum requires X-API-Key HTTP header.
        This X-API-Key represents identification of the plan and can be used by 1 developer or per environment.
        Each X-API-Key is bound to the test or production blockchains.
      in: header
      name: x-api-key
      type: apiKey
