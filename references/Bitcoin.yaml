openapi: 3.1.0
info:
  contact: {}
  title: Bitcoin
  version: 3.9.4
  x-logo:
    url: 'https://tatum.io/images/logo.svg'
    altText: Tatum
  description: '
                <p>Bitcoin Blockchain enables access to the most commonly used Bitcoin methods. These methods bring a small level of abstraction
      and are used for applications that communicate with the blockchain directly. Some of the methods are used alongside Tatum Private Ledger
      to connect the blockchain and the private ledger, like wallet generation or getting information about transactions.<br/>
      Tatum supports 2 chains:
      <ul><li>Mainnet - a regular live chain</li>
      <li>Testnet - a chain used for testing purposes. Coins on the test chain have no value and can be obtained from a faucet, e.g. <a target="_blank" href="https://testnet-faucet.mempool.co/">https://testnet-faucet.mempool.co/</a></li></ul><br/>
      Tatum supports BIP44 HD wallets. Because they can generate 2^31 addresses from 1 mnemonic phrase, they are very convenient and secure. It is possible to generate this type of wallet with 1 simple API call.</p>'
servers:
  - url: 'https://api-eu1.tatum.io'
  - url: 'https://api-us-west1.tatum.io'
tags:
  - description: ''
    name: Account
  - description: ''
    name: Block
  - description: ''
    name: Transaction
  - description: ''
    name: Utilities
paths:
  /v3/bitcoin/wallet:
    get:
      description: |
        <h4>1 credit per API call.</h4><br/><p>Tatum supports BIP44 HD wallets. Because they can generate 2^31 addresses from 1 mnemonic phrase, they are very convenient and secure. A mnemonic phrase consists of 24 special words in a defined order and can restore access to all generated addresses and private keys.<br/>Each address is identified by 3 main values:<ul><li>Private Key - your secret value, which should never be revealed</li><li>Public Key - public address to be published</li><li>Derivation index - index of generated address</li></ul></p><p>Tatum follows BIP44 specification and generates for Bitcoin wallet with derivation path m'/44'/0'/0'/0. More about BIP44 HD wallets can be found here - <a target="_blank" href="https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki">https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki</a>.
        Generate BIP44 compatible Bitcoin wallet.</p>
      operationId: BtcGenerateWallet
      summary: Generate Bitcoin wallet
      tags:
        - Account
      parameters:
        - description: Mnemonic to use for generation of extended public and private keys.
          in: query
          name: mnemonic
          required: false
          schema:
            type: string
            maxLength: 500
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request. Validation failed for the given object in the HTTP Body or Request parameters.
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Error401NotActive'
                  - $ref: '#/components/schemas/Error401Invalid'
          description: Unauthorized. Not valid or inactive subscription key present in the HTTP Header.
        '403':
          description: 'Forbidden. The request is authenticated, but it is not possible to perform the required operation due to a logical error or invalid permissions.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403BtcBlockchain'
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal server error. There was an error on the server while processing the request.
      security:
        - X-Api-Key: []
  '/v3/bitcoin/address/{xpub}/{index}':
    get:
      description: |
        <h4>1 credit per API call.</h4><br/>
        <p>Generates a Bitcoin deposit address from an Extended public key. The deposit address is generated for the specific index - each extended public key can generate
        up to 2^31 addresses starting from index 0 until 2^31 - 1.</p>
      operationId: BtcGenerateAddress
      summary: Generate Bitcoin deposit address from Extended public key
      tags:
        - Account
      parameters:
        - description: Extended public key of a wallet.
          in: path
          name: xpub
          required: true
          example: xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid
          schema:
            type: string
        - description: Derivation index of the desired address to be generated.
          in: path
          name: index
          required: true
          example: 0
          schema:
            type: number
            minimum: 0
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  address:
                    type: string
                    description: Bitcoin address
                    example: n36h3pAH7sC3z8KMB47BjbqvW2aJd2oTi7
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request. Validation failed for the given object in the HTTP Body or Request parameters.
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Error401NotActive'
                  - $ref: '#/components/schemas/Error401Invalid'
          description: Unauthorized. Not valid or inactive subscription key present in the HTTP Header.
        '403':
          description: 'Forbidden. The request is authenticated, but it is not possible to perform the required operation due to a logical error or invalid permissions.'
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Error403AccountIncompatibleXpubBtc'
                  - $ref: '#/components/schemas/Error403AccountAddressGeneral'
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal server error. There was an error on the server while processing the request.
      security:
        - X-Api-Key: []
  /v3/bitcoin/wallet/priv:
    post:
      description: |
        <h4>1 credit per API call.</h4><br/>
        <p>Generates a private key for an address from a mnemonic for a given derivation path index. The private key is generated for the specific index - each mnemonic
        can generate up to 2^32 private keys starting from index 0 until 2^31 - 1.</p>
      operationId: BtcGenerateAddressPrivateKey
      summary: Generate Bitcoin private key
      tags:
        - Account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrivKeyRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivKey'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request. Validation failed for the given object in the HTTP Body or Request parameters.
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Error401NotActive'
                  - $ref: '#/components/schemas/Error401Invalid'
          description: Unauthorized. Not valid or inactive subscription key present in the HTTP Header.
        '403':
          description: 'Forbidden. The request is authenticated, but it is not possible to perform the required operation due to a logical error or invalid permissions.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403BlockchainPrivateFailed'
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal server error. There was an error on the server while processing the request.
      security:
        - X-Api-Key: []
  /v3/bitcoin/info:
    get:
      description: '<h4>1 credit per API call.</h4><br/><p>Gets Bitcoin blockchain information. Obtains basic info like the testnet / mainnet version of the chain, the current block number and its hash.</p>'
      operationId: BtcGetBlockChainInfo
      summary: Get Bitcoin blockchain information
      tags:
        - Block
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BtcInfo'
          description: OK
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Error401NotActive'
                  - $ref: '#/components/schemas/Error401Invalid'
          description: Unauthorized. Not valid or inactive subscription key present in the HTTP Header.
        '403':
          description: 'Forbidden. The request is authenticated, but it is not possible to perform the required operation due to a logical error or invalid permissions.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403BtcBlockchain'
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal server error. There was an error on the server while processing the request.
      security:
        - X-Api-Key: []
  '/v3/bitcoin/block/hash/{i}':
    get:
      description: <h4>1 credit per API call.</h4><br/><p>Gets a Bitcoin block hash. Returns the hash of the block to get the block's details.</p>
      operationId: BtcGetBlockHash
      summary: Get Bitcoin block hash
      tags:
        - Block
      parameters:
        - description: The number of blocks preceding a particular block on a blockchain.
          in: path
          name: i
          required: true
          schema:
            type: number
            example: 1580117
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  hash:
                    type: string
                    description: Block hash
                    example: 0000000053f225e202cf27fe3046e06719efd3b31b5ab75fc5ef7f853c8b246f
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request. Validation failed for the given object in the HTTP Body or Request parameters.
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Error401NotActive'
                  - $ref: '#/components/schemas/Error401Invalid'
          description: Unauthorized. Not valid or inactive subscription key present in the HTTP Header.
        '403':
          description: 'Forbidden. The request is authenticated, but it is not possible to perform the required operation due to a logical error or invalid permissions.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403BtcBlockchain'
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal server error. There was an error on the server while processing the request.
      security:
        - X-Api-Key: []
  '/v3/bitcoin/block/{hash}':
    get:
      description: <h4>1 credit per API call.</h4><br/><p>Gets Bitcoin block detail by block hash or height.</p>
      operationId: BtcGetBlock
      summary: Get Bitcoin by hash or height
      tags:
        - Block
      parameters:
        - description: Block hash or height.
          in: path
          name: hash
          required: true
          schema:
            type: string
            example: 00000000ca231a439a5c0a86a5a5dd6dc1918a8e897b96522fa9499288e70183
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BtcBlock'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request. Validation failed for the given object in the HTTP Body or Request parameters.
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Error401NotActive'
                  - $ref: '#/components/schemas/Error401Invalid'
          description: Unauthorized. Not valid or inactive subscription key present in the HTTP Header.
        '403':
          description: 'Forbidden. The request is authenticated, but it is not possible to perform the required operation due to a logical error or invalid permissions.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403BlockNotExists'
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal server error. There was an error on the server while processing the request.
      security:
        - X-Api-Key: []
  '/v3/bitcoin/transaction/{hash}':
    get:
      description: <h4>1 credit per API call.</h4><br/><p>Get Bitcoin Transaction detail by transaction hash.</p>
      operationId: BtcGetRawTransaction
      summary: Get Bitcoin transaction by hash
      tags:
        - Transaction
      parameters:
        - description: Transaction hash
          in: path
          name: hash
          required: true
          schema:
            type: string
            example: 1451692ebbfbea1a2d2ec6fe6782596b6aa2e46c0589d04c406f491b5b46bc6a
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BtcTx'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request. Validation failed for the given object in the HTTP Body or Request parameters.
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Error401NotActive'
                  - $ref: '#/components/schemas/Error401Invalid'
          description: Unauthorized. Not valid or inactive subscription key present in the HTTP Header.
        '403':
          description: 'Forbidden. The request is authenticated, but it is not possible to perform the required operation due to a logical error or invalid permissions.'
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Error403BtcBlockchain'
                  - $ref: '#/components/schemas/Error403TxNotFound'
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal server error. There was an error on the server while processing the request.
      security:
        - X-Api-Key: []
  /v3/bitcoin/mempool:
    get:
      description: <h4>1 credit per API call.</h4><br/><p>Gets Bitcoin transaction IDs in the mempool.</p>
      operationId: BtcGetMempool
      summary: Get Bitcoin mempool transactions
      tags:
        - Transaction
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  description: TX ID of the transaction in mempool
                  example: 4c7846a8ff8415945e96937dea27bdb3144c15d793648d725602784826052586
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request. Validation failed for the given object in the HTTP Body or Request parameters.
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Error401NotActive'
                  - $ref: '#/components/schemas/Error401Invalid'
          description: Unauthorized. Not valid or inactive subscription key present in the HTTP Header.
        '403':
          description: 'Forbidden. The request is authenticated, but it is not possible to perform the required operation due to a logical error or invalid permissions.'
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Error403BtcBlockchain'
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal server error. There was an error on the server while processing the request.
      security:
        - X-Api-Key: []
  '/v3/bitcoin/transaction/address/{address}':
    get:
      description: <h4>1 credit per API call.</h4><br/><p>Gets a Bitcoin transaction by address.</p>
      operationId: BtcGetTxByAddress
      summary: Get Bitcoin transactions by address
      tags:
        - Transaction
      parameters:
        - description: Address
          in: path
          name: address
          required: true
          schema:
            type: string
            example: 2MsM67NLa71fHvTUBqNENW15P68nHB2vVXb
        - description: Max number of items per page is 50.
          in: query
          name: pageSize
          schema:
            type: number
            example: 10
            maximum: 50
            minimum: 1
          required: true
        - description: Offset to obtain the next page of data.
          in: query
          name: offset
          schema:
            type: number
            example: 0
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/BtcTx'
                type: array
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request. Validation failed for the given object in the HTTP Body or Request parameters.
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Error401NotActive'
                  - $ref: '#/components/schemas/Error401Invalid'
          description: Unauthorized. Not valid or inactive subscription key present in the HTTP Header.
        '403':
          description: 'Forbidden. The request is authenticated, but it is not possible to perform the required operation due to a logical error or invalid permissions.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403BtcBlockchain'
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal server error. There was an error on the server while processing the request.
      security:
        - X-Api-Key: []
  '/v3/bitcoin/address/balance/{address}':
    get:
      description: <h4>1 credit per API call.</h4><br/><p>Gets the Bitcoin balance of the address.</p>
      operationId: BtcGetBalanceOfAddress
      summary: Get the balance of an Bitcoin address
      tags:
        - Account
      parameters:
        - description: Address
          in: path
          name: address
          required: true
          schema:
            type: string
            example: 2MsM67NLa71fHvTUBqNENW15P68nHB2vVXb
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BtcBasedBalance'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request. Validation failed for the given object in the HTTP Body or Request parameters.
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Error401NotActive'
                  - $ref: '#/components/schemas/Error401Invalid'
          description: Unauthorized. Not valid or inactive subscription key present in the HTTP Header.
        '403':
          description: 'Forbidden. The request is authenticated, but it is not possible to perform the required operation due to a logical error or invalid permissions.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403BtcBlockchain'
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal server error. There was an error on the server while processing the request.
      security:
        - X-Api-Key: []
  '/v3/bitcoin/utxo/{hash}/{index}':
    get:
      description: |
        <h4>1 credit per API call.</h4><br/>
        <p>Get the UTXO of given transaction and output index. UTXO means Unspent Transaction Output, which in blockchain terminology means assets that a user
        has received at a specific address and has not yet spent.<br/>
        In bitcoin-like blockchains (BTC, LTC, DOGE, BCH), every transaction is built from a list of previously
        unspent transactions connected to the address. If a user owns address A, and receives 10 BTC in transaction T1, they can spend
        a UTXO T1 with a total value of 10 BTC in the next transaction. The user can spend multiple UTXOs from different addresses in one transaction.<br/>
        If the UTXO is not spent, the data are returned, or a 404 error code is generated.</p>
      operationId: BtcGetUTXO
      summary: Get UTXO of Bitcoin transaction
      tags:
        - Transaction
      parameters:
        - description: TX Hash
          in: path
          name: hash
          required: true
          schema:
            type: string
            minLength: 64
            maxLength: 64
            example: 53faa103e8217e1520f5149a4e8c84aeb58e55bdab11164a95e69a8ca50f8fcc
        - description: Index of tx output to check if it has been spent or not
          in: path
          name: index
          required: true
          schema:
            type: number
            example: 0
            minimum: 0
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BtcUTXO'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request. Validation failed for the given object in the HTTP Body or Request parameters.
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Error401NotActive'
                  - $ref: '#/components/schemas/Error401Invalid'
          description: Unauthorized. Not valid or inactive subscription key present in the HTTP Header.
        '403':
          description: 'Forbidden. The request is authenticated, but it is not possible to perform the required operation due to a logical error or invalid permissions.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403BtcUTXO'
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal server error. There was an error on the server while processing the request.
      security:
        - X-Api-Key: []
  /v3/bitcoin/transaction:
    post:
      description: |
        <h4>2 credits per API call.</h4><br/>
        <p>Send Bitcoin to blockchain addresses. It is possible to build a blockchain transaction in 2 ways:
        <ul>
        <li><b>fromAddress</b> - assets will be sent from the list of addresses. For each of the addresses, the last 100 transactions will be scanned for any unspent UTXO to be included in the transaction.</li>
        <li><b>fromUTXO</b> - assets will be sent from the list of unspent UTXOs. Each of the UTXOs will be included in the transaction.</li>
        </ul>
        In bitcoin-like blockchains, a transaction is created from the list of previously unspent UTXOs. Every UTXO contains the amount of funds that can be spent.
        When the UTXO is entered into the transaction, the whole amount is included and must be spent. For example, address A receives 2 transactions, T1 with 1 BTC and T2 with 2 BTC.
        The transaction, which will consume the UTXOs for T1 and T2, will have an available amount to spend of 3 BTC = 1 BTC (T1) + 2 BTC(T2).<br/><br/>
        There can be multiple recipients of the transactions. In the <b>to</b> section, every recipient address has its own corresponding amount.
        When the amount of funds that the recipient should receive is lower than the amount of funds from the UTXOs, the difference is used as a transaction fee.<br/><br/>
        This operation requires the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key.
        No one should ever send their private keys to the Internet because there is a strong possibility that they will be stolen and the funds will be lost. In this method, it is possible to enter a privateKey
        or signatureId. The privateKey should be used only for quick development on testnet versions of blockchains when there is no risk of losing funds. In production,
        <a href="https://github.com/tatumio/tatum-kms" target="_blank">Tatum KMS</a> should be used to ensure the highest level of security, and the signatureId should be present in the request.
        Alternatively, it is also possible to use the Tatum Client Library for supported languages or Tatum Middleware with a custom key management system.
        </p>
      operationId: BtcTransferBlockchain
      summary: Send Bitcoin to blockchain addresses
      tags:
        - Transaction
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/BtcTransactionFromAddress'
                - $ref: '#/components/schemas/BtcTransactionFromAddressKMS'
                - $ref: '#/components/schemas/BtcTransactionFromUTXO'
                - $ref: '#/components/schemas/BtcTransactionFromUTXOKMS'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/TransactionHashKMS'
                  - $ref: '#/components/schemas/SignatureId'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request. Validation failed for the given object in the HTTP Body or Request parameters.
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Error401NotActive'
                  - $ref: '#/components/schemas/Error401Invalid'
          description: Unauthorized. Not valid or inactive subscription key present in the HTTP Header.
        '403':
          description: 'Forbidden. The request is authenticated, but it is not possible to perform the required operation due to a logical error or invalid permissions.'
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Error403BtcTx'
                  - $ref: '#/components/schemas/Error403BtcBlockchain'
                  - $ref: '#/components/schemas/Error403BtcUTXO'
                  - $ref: '#/components/schemas/Error403BtcTxFailed'
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal server error. There was an error on the server while processing the request.
      security:
        - X-Api-Key: []
  /v3/bitcoin/broadcast:
    post:
      description: |
        <h4>2 credits per API call.</h4><br/>
        <p>Broadcasts a signed transaction to the Bitcoin blockchain. This method is used internally from Tatum KMS, Tatum Middleware or Tatum Client Libraries.
        It is possible to create a custom signing mechanism and only use this method for broadcasting data to the blockchain.</p>
      operationId: BtcBroadcast
      summary: Broadcast signed Bitcoin transaction
      tags:
        - Transaction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BroadcastKMS'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionHashKMS'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request. Validation failed for the given object in the HTTP Body or Request parameters.
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Error401NotActive'
                  - $ref: '#/components/schemas/Error401Invalid'
          description: Unauthorized. Not valid or inactive subscription key present in the HTTP Header.
        '403':
          description: 'Forbidden. The request is authenticated, but it is not possible to perform the required operation due to a logical error or invalid permissions.'
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Error403BtcBlockchain'
                  - $ref: '#/components/schemas/Error403Broadcast'
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal server error. There was an error on the server while processing the request.
      security:
        - X-Api-Key: []
  /v3/bitcoin/node:
    post:
      description: |
        <h4>2 credits per API call.</h4><br/>
        Use this endpoint URL as an http-based JSON RPC driver to connect directly to the node provided by Tatum. <br/>
        To learn more about JSON RPC, please visit <a href=\"https://developer.bitcoin.org/reference/rpc/index.html\" target=\"_blank\">Bitcoin developers' guide.</a>
      operationId: BzcRpcDriver
      summary: Bitcoin RPC node
      tags:
        - Transaction
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: Any valid JSON RPC method content body. description.
              properties:
                jsonrpc:
                  type: integer
                  description: Version of the JSON RPC.
                  example: 1.0
                id:
                  type: string
                  description: ID of the request, could be any arbitrary identifier.
                  example: "test"
                method:
                  type: string
                  description: "Method to invoke on the note."
                  example: "getblockcount"
                params:
                    type: array
                    description: "Params to the method call, if required."
                    example: []
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                description: "Any valid RPC response."
                example:
                  jsonrpc: 1.0
                  id: "test"
                  result: 654321
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request. Validation failed for the given object in the HTTP Body or Request parameters.
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Error401NotActive'
                  - $ref: '#/components/schemas/Error401Invalid'
          description: Unauthorized. Not valid or inactive subscription key present in the HTTP Header.
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal server error. There was an error on the server while processing the request.
      security:
        - X-Api-Key: []
components:
  schemas:
    BtcBlock:
      type: object
      properties:
        hash:
          type: string
          description: Hash of block.
          example: 00000000ca231a439a5c0a86a5a5dd6dc1918a8e897b96522fa9499288e70183
        height:
          description: The number of blocks preceding a particular block on a block chain.
          type: number
          example: 15235
        depth:
          description: 'The number of blocks following a particular block on a block chain, including current one.'
          type: number
          example: 1567867
        version:
          type: number
          description: Block version.
          example: 1
        prevBlock:
          type: string
          description: Hash of the previous block.
          example: 000000006e79360d7b2519410fe5a73e8e08393fd7166620c73c711e4507d9fd
        merkleRoot:
          type: string
          description: 'The root node of a merkle tree, a descendant of all the hashed pairs in the tree.'
          example: 480c227c5042377dbd54464d33e1f59c19fe02fe76d7f55b6955db438479aece
        time:
          type: number
          description: Time of the block.
          example: 1338861927
        bits:
          type: number
          example: 486604799
        nonce:
          type: number
          description: Arbitrary number that is used in Bitcoin's proof of work consensus algorithm.
          example: 1193572362
        txs:
          type: array
          items:
            $ref: '#/components/schemas/BtcTx'
    BtcInfo:
      type: object
      properties:
        chain:
          type: string
          description: 'Chain of the blockchain, main or test.'
          example: test
        blocks:
          type: number
          description: Last block.
          example: 1579820
        headers:
          type: number
          description: Last headers.
          example: 1579820
        bestblockhash:
          description: Hash of the last block.
          type: string
          example: 0000000000000106e4c03ca093ce0cf77e796ddff4f3cadc59ca6b0380e3eed4
        difficulty:
          type: number
          description: Difficulty of the algorithm.
          example: 6522714.521250089
    BtcBasedBalance:
      type: object
      properties:
        incoming:
          type: string
          description: Total sum of the assets that arrives to the address.
          example: '0.1234'
        outgoing:
          type: string
          description: Total sum of the assets that leaves from the address.
          example: '0.1'
    BtcTx:
      type: object
      properties:
        hash:
          type: string
          description: Transaction hash.
          example: 4c7846a8ff8415945e96937dea27bdb3144c15d793648d725602784826052586
        witnessHash:
          type: string
          description: Witness hash in case of a SegWit transaction.
          example: 4c7846a8ff8415945e96937dea27bdb3144c15d793648d725602784826052586
        fee:
          type: number
          description: 'Fee paid for this transaction, in satoshis.'
          example: 4540
        rate:
          type: number
          example: 20088
        mtime:
          type: number
          example: 1575663337
        height:
          type: number
          description: Height of the block this transaction belongs to.
          example: 1611609
        block:
          type: string
          description: Hash of the block this transaction belongs to.
          example: 00000000000001e13fe1eb3977f3379e3d0f6577fc6e087d27db46597ebddb8b
        time:
          type: number
          description: Time of the transaction.
          example: 1575663091
        index:
          type: number
          description: Index of the transaction in the block.
          example: 1
        version:
          type: number
          description: Index of the transaction.
          example: 2
        inputs:
          description: 'List of transactions, from which assets are being sent.'
          type: array
          items:
            type: object
            properties:
              prevout:
                properties:
                  hash:
                    type: string
                    description: Transaction hash of the input.
                    example: 60bc8445c11318e45a72a3259e65118d2f352568757e6ceb8bf1b527ce68379f
                  index:
                    type: number
                    description: Transaction index of the input.
                    example: 1
                type: object
              script:
                type: string
                description: Data generated by a spender which is almost always used as variables to satisfy a pubkey script.
                example: 1600148c65244f095f3689aebb70981d102e33036fe786
              witness:
                type: string
                description: Transaction witness.
                example: 0247304402207d7af97665ef5502c957f76a9fcdde2c228b6a8dc9951d45c318e6dfca0fcd2802207519528d6b61cc044800ab2cb499ef5f31d4decdc327c14fad4abbc3dd6e0190012102861d682cfd3bec8cbed98f5162299ba613bc5f352dd0d51961a5d81359fbc0af
              sequence:
                type: number
                example: 4294967294
              coin:
                properties:
                  version:
                    type: number
                    example: 2
                  height:
                    type: number
                    example: 1611608
                  value:
                    type: number
                    description: 'Amount of the transaction, in Satoshis (1 BTC = 100 000 000 Satoshis)'
                    example: 1341956178
                  script:
                    type: string
                    example: 0014049a97d91d4e1123899bf48c5ba6ce3fd959664e
                  address:
                    type: string
                    description: Sender address.
                    example: tb1qqjdf0kgafcgj8zvm7jx9hfkw8lv4jejw6wsmjg
                  coinbase:
                    type: boolean
                    description: Coinbase transaction - miner fee.
                    example: false
                type: object
        outputs:
          type: array
          description: List of recipient addresses and amounts to send to each of them.
          items:
            type: object
            properties:
              value:
                type: number
                description: Sent amount in satoshis.
                example: 2068942
              script:
                type: string
                description: Transaction script.
                example: a914eaf2ad7e161c3ce7092bde14dc5842b642fe925187
              address:
                type: string
                description: Recipient address.
                example: 2NEfWpiQwLEcHGbX2Fwij16NDxTEZwHk4BH
        locktime:
          type: number
          description: Block this transaction was included in.
          example: 1611608
    BtcUTXO:
      type: object
      properties:
        version:
          type: number
          description: Version of the UTXO.
          example: 1
        height:
          type: number
          example: -1
        value:
          type: number
          description: Amount of UTXO in satoshis.
          example: 30000000
        script:
          type: string
          description: Data generated by a spender which is almost always used as variables to satisfy a pubkey script.
          example: 76a91400ba915c3d18907b79e6cfcd8b9fdf69edc7a7db88ac
        address:
          type: string
          description: Address of the owner of the UTXO.
          example: R9M3aUWCcKoiqDPusJvqNkAbjffLgCqYip
        coinbase:
          type: boolean
          description: Coinbase transaction - miner fee.
          example: false
        hash:
          type: string
          description: Transaction hash.
          example: 53faa103e8217e1520f5149a4e8c84aeb58e55bdab11164a95e69a8ca50f8fcc
        index:
          type: number
          description: Transaction index of the output.
          example: 0
    BtcTransactionFromAddress:
      type: object
      title: Private Key
      required:
        - to
        - fromAddress
      properties:
        fromAddress:
          description: Array of addresses and corresponding private keys. Tatum will automatically scan last 100 transactions for each address and will use all of the unspent values. We advise to use this option if you have 1 address per 1 transaction only.
          type: array
          items:
            type: object
            required:
              - address
              - privateKey
            properties:
              address:
                description: Address to send assets from.
                type: string
                example: 2N9bBiH2qrTDrPCzrNhaFGdkNKS86PJAAAS
                minimum: 30
                maximum: 50
              privateKey:
                description: 'Private key of the address to send assets from. Private key, or signature Id must be present.'
                type: string
                minimum: 52
                maximum: 52
                example: cVX7YtgL5muLTPncHFhP95oitV1mqUUA5VeSn8HeCRJbPqipzobf
        to:
          description: Array of addresses and values to send bitcoins to. Values must be set in BTC. Difference between from and to is transaction fee.
          type: array
          items:
            type: object
            required:
              - address
              - value
            properties:
              address:
                description: Destination address.
                type: string
                example: 2MzNGwuKvMEvKMQogtgzSqJcH2UW3Tc5oc7
                minimum: 30
                maximum: 60
              value:
                description: 'Amount to be sent, in BTC.'
                type: number
                minimum: 0
                example: 0.02969944
    BtcTransactionFromUTXO:
      type: object
      title: UTXO
      required:
        - to
        - fromUTXO
      properties:
        fromUTXO:
          description: 'Array of transaction hashes, index of UTXO in it and corresponding private keys. Use this option if you want to calculate amount to send manually. Either fromUTXO or fromAddress must be present.'
          type: array
          items:
            type: object
            required:
              - txHash
              - index
              - privateKey
            properties:
              txHash:
                description: Transaction hash of the UTXO to be spent.
                type: string
                example: 53faa103e8217e1520f5149a4e8c84aeb58e55bdab11164a95e69a8ca50f8fcc
                minLength: 64
                maxLength: 64
              index:
                description: Index of the UTXO to be spent.
                type: number
                example: 0
                minimum: 0
                maximum: 2147483647
              privateKey:
                description: Private key of the UTXO to be spent.
                type: string
                example: cVX7YtgL5muLTPncHFhP95oitV1mqUUA5VeSn8HeCRJbPqipzobf
                minLength: 52
                maxLength: 52
        to:
          description: Array of addresses and values to send bitcoins to. Values must be set in BTC. Difference between from and to is transaction fee.
          type: array
          items:
            type: object
            required:
              - address
              - value
            properties:
              address:
                description: Destination address.
                type: string
                example: 2MzNGwuKvMEvKMQogtgzSqJcH2UW3Tc5oc7
                minimum: 30
                maximum: 60
              value:
                description: 'Amount to be sent, in BTC.'
                type: number
                minimum: 0
                example: 0.02969944
    BtcTransactionFromAddressKMS:
      type: object
      title: Signature
      required:
        - to
        - fromAddress
      properties:
        fromAddress:
          description: Array of addresses and corresponding private keys. Tatum will automatically scan last 100 transactions for each address and will use all of the unspent values. We advise to use this option if you have 1 address per 1 transaction only.
          type: array
          items:
            type: object
            required:
              - address
              - signatureId
            properties:
              signatureId:
                type: string
                minimum: 36
                maximum: 36
                format: uuid
                example: 1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6
                description: 'Identifier of the private key associated in signing application. Private key, or signature Id must be present.'
              address:
                description: Address to send assets from.
                type: string
                example: 2N9bBiH2qrTDrPCzrNhaFGdkNKS86PJAAAS
                minimum: 30
                maximum: 50
        to:
          description: Array of addresses and values to send bitcoins to. Values must be set in BTC. Difference between from and to is transaction fee.
          type: array
          items:
            type: object
            required:
              - address
              - value
            properties:
              address:
                description: Destination address.
                type: string
                example: 2MzNGwuKvMEvKMQogtgzSqJcH2UW3Tc5oc7
                minimum: 30
                maximum: 60
              value:
                description: 'Amount to be sent, in BTC.'
                type: number
                minimum: 0
                example: 0.02969944
    BtcTransactionFromUTXOKMS:
      type: object
      title: UTXO + Signature
      required:
        - to
        - fromUTXO
      properties:
        fromUTXO:
          description: 'Array of transaction hashes, index of UTXO in it and corresponding private keys. Use this option if you want to calculate amount to send manually. Either fromUTXO or fromAddress must be present.'
          type: array
          items:
            type: object
            required:
              - txHash
              - signatureId
              - index
            properties:
              txHash:
                description: Transaction hash of the UTXO to be spent.
                type: string
                example: 53faa103e8217e1520f5149a4e8c84aeb58e55bdab11164a95e69a8ca50f8fcc
                minLength: 64
                maxLength: 64
              index:
                description: Index of the UTXO to be spent.
                type: number
                example: 0
                minimum: 0
                maximum: 2147483647
              signatureId:
                type: string
                minimum: 36
                maximum: 36
                format: uuid
                example: 1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6
                description: Identifier of the private key associated in signing application.
        to:
          description: Array of addresses and values to send bitcoins to. Values must be set in BTC. Difference between from and to is transaction fee.
          type: array
          items:
            type: object
            required:
              - address
              - value
            properties:
              address:
                description: Destination address.
                type: string
                example: 2MzNGwuKvMEvKMQogtgzSqJcH2UW3Tc5oc7
                minimum: 30
                maximum: 60
              value:
                description: 'Amount to be sent, in BTC.'
                type: number
                minimum: 0
                example: 0.02969944
    BroadcastKMS:
      properties:
        txData:
          description: Raw signed transaction to be published to network.
          example: 62BD544D1B9031EFC330A3E855CC3A0D51CA5131455C1AB3BCAC6D243F65460D
          maxLength: 500000
          minLength: 1
          type: string
        signatureId:
          description: 'ID of prepared payment template to sign. Required only, when broadcasting transaction signed by Tatum KMS.'
          format: uuid
          example: 1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6
          type: string
          minLength: 36
          maxLength: 36
      required:
        - txData
      type: object
    PrivKey:
      type: object
      properties:
        key:
          description: Generated private key.
          example: cTmS2jBWXgFaXZ2xG9jhn67TiyTshnMp3UedamzEhGm6BZV1vLgQ
          type: string
    PrivKeyRequest:
      type: object
      properties:
        index:
          description: Derivation index of private key to generate.
          example: 0
          maximum: 2147483647
          type: integer
        mnemonic:
          maxLength: 500
          minLength: 1
          description: Mnemonic to generate private key from.
          example: urge pulp usage sister evidence arrest palm math please chief egg abuse
          type: string
      required:
        - mnemonic
        - index
    SignatureId:
      type: object
      title: SignatureId
      properties:
        signatureId:
          format: uuid
          description: 'ID of prepared payment template to sign. This is should be stored on a client side to retrieve ID of the blockchain transaction, when signing application signs the transaction and broadcasts it to the blockchain.'
          example: 1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6
          type: string
      required:
        - signatureId
    TransactionHashKMS:
      type: object
      title: TransactionHashKMS
      properties:
        txId:
          description: TX hash of successful transaction.
          example: c83f8818db43d9ba4accfe454aa44fc33123d47a4f89d47b314d6748eb0e9bc9
          type: string
        failed:
          description: 'In case of the transaction was broadcast to the blockchain, but it was not possible to complete Tatum KMS signature, reponse is marked as failed and must be marked manually.'
          example: false
          type: boolean
      required:
        - txId
    Wallet:
      type: object
      properties:
        address:
          maxLength: 58
          minLength: 58
          description: address of Algorand account.
          example: NTAESFCB3WOD7SAOL42KSPVARLB3JFA3MNX3AESWHYVT2RMYDVZI6YLG4Y
          type: string
        secret:
          maxLength: 103
          minLength: 103
          description: 'secretKey can generate Mnemonic, similar to private Key.'
          type: string
          example: NBYMCVEEDFYV3TPWVRE6APE7PKHUJD4XAKXCKNCLKGUXOC3LFNJGZQCJCRA53HB7ZAHF6NFJH2QIVQ5USQNWG35QCJLD4KZ5IWMB24Q
    Error400:
      properties:
        errorCode:
          example: validation.failed
          description: validation.failed
          type: string
        message:
          example: Request validation failed. Please see data for additional information.
          description: Request validation failed. Please see data for additional information.
          type: string
        statusCode:
          example: 400
          description: '400'
          type: number
        data:
          type: array
          items:
            type: object
            required:
              - target
            properties:
              target:
                type: object
                additionalProperties: true
                description: Request object present in the body of the HTTP request
                example:
                  property: 12345
              value:
                type: number
                description: 'Value of the target object which validation is wrong. Can be of any data type, example here is using type number.'
                example: 12345
              property:
                type: string
                description: Property name of the target object which validation is wrong
                example: property1
              constraints:
                type: object
                additionalProperties: true
                description: 'Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.'
                example:
                  min: property1 must not be less than 50000
      required:
        - errorCode
        - message
        - statusCode
        - data
      type: object
    Error401Invalid:
      properties:
        errorCode:
          example: subscription.invalid
          description: subscription.invalid
          type: string
        message:
          example: 'Unable to find valid subscription for ''${apiKey}'''
          description: 'Unable to find valid subscription for ''${apiKey}'''
          type: string
        statusCode:
          example: 401
          description: '401'
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error401NotActive:
      properties:
        errorCode:
          example: subscription.not.active
          description: subscription.not.active
          type: string
        message:
          example: Subscription not active anymore.
          description: Subscription not active anymore.
          type: string
        statusCode:
          example: 401
          description: '401'
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403AccountIncompatibleXpubBtc:
      properties:
        errorCode:
          description: Address.generation.failed.wrong.xpub
          example: address.generation.failed.wrong.xpub
          type: string
        message:
          description: 'Unable to generate address, wrong xpub and account type.'
          example: 'Unable to generate address, wrong xpub and account type.'
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403AccountAddressGeneral:
      properties:
        errorCode:
          description: Address.generation.failed
          example: address.generation.failed
          type: string
        message:
          description: Unable to generate address.
          example: Unable to generate address.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403BlockNotExists:
      properties:
        errorCode:
          description: block.hash.not.exists
          example: block.hash.not.exists
          type: string
        message:
          description: No such block.
          example: No such block.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403Broadcast:
      properties:
        errorCode:
          description: blockchain.broadcast.error
          example: blockchain.broadcast.error
          type: string
        message:
          description: 'Unable to broadcast transaction, wrong input data.'
          example: 'Unable to broadcast transaction, wrong input data.'
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403BtcBlockchain:
      properties:
        errorCode:
          description: blockchain.error.code
          example: blockchain.error.code
          type: string
        message:
          description: '${error.message} Code: ${error.code}'
          example: '${error.message} Code: ${error.code}'
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403BlockchainPrivateFailed:
      properties:
        errorCode:
          description: key.generation.failed.wrong.mnemonic
          example: key.generation.failed.wrong.mnemonic
          type: string
        message:
          description: 'Unable to generate address, wrong mnemonic and index.'
          example: 'Unable to generate address, wrong mnemonic and index.'
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403BtcUTXO:
      properties:
        errorCode:
          description: tx.hash.index.spent
          example: tx.hash.index.spent
          type: string
        message:
          description: No such UTXO for transaction and index.
          example: No such UTXO for transaction and index.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403BtcTxFailed:
      properties:
        errorCode:
          description: transaction.failed
          example: transaction.failed
          type: string
        message:
          description: No spendable inputs.
          example: No spendable inputs.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403BtcTx:
      properties:
        errorCode:
          description: transaction.invalid.body
          example: transaction.invalid.body
          type: string
        message:
          description: 'Either UTXO, or addresses must be present.'
          example: 'Either UTXO, or addresses must be present.'
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403TxNotFound:
      properties:
        errorCode:
          description: tx.missing
          example: tx.missing
          type: string
        message:
          description: No such tx.
          example: No such tx.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error500:
      properties:
        message:
          example: Internal server error
          description: Internal server error
          type: string
        statusCode:
          example: 500
          description: '500'
          type: number
      required:
        - statusCode
        - message
      type: object
  securitySchemes:
      X-Api-Key:
        description: |
          To maintain the highest security level, Tatum requires X-API-Key HTTP header.
          This X-API-Key represents identification of the plan and can be used by 1 developer or per environment.
          Each X-API-Key is bound to the test or production blockchains.
        in: header
        name: x-api-key
        type: apiKey