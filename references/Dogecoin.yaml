openapi: 3.1.0
info:
  contact: {}
  title: Dogecoin
  version: 3.9.4
  x-logo:
    url: 'https://tatum.io/images/logo.svg'
    altText: Tatum
  description: |-
                <p>Dogecoin Blockchain enables access to the most commonly used Dogecoin methods. These methods bring a small level of abstraction
                  and are used for applications that communicate with the blockchain directly. Some of the methods are used alongside Tatum Private Ledger
                  to connect the blockchain and the private ledger, like wallet generation or getting information about transactions.<br/>
                  <b>Dogecoin is in beta phase.</b><br/>
                  Tatum supports 2 chains:
                    <ul><li>Mainnet - a regular live chain</li>
                    <li>Testnet - a chain used for testing purposes. Coins on the test chain have no value and can be obtained from a faucet, e.g. <a target="_blank" href="https://testnet-faucet.com/doge-testnet/">https://testnet-faucet.com/doge-testnet/</a></li></ul>
                  Tatum supports BIP44 HD wallets. Because they can generate 2^31 addresses from 1 mnemonic phrase, they are very convenient and secure. It is possible to generate this type of wallet with 1 simple API call.</p>
servers:
  - url: 'https://api-eu1.tatum.io'
  - url: 'https://api-us-west1.tatum.io'
tags:
  - description: ''
    name: Account
  - description: ''
    name: Block
  - description: ''
    name: Transaction
paths:
  /v3/dogecoin/wallet:
    get:
      description: |
        <h4>1 credit per API call.</h4><br/><p>Tatum supports BIP44 HD wallets. It is very convenient and secure, since it can generate 2^31 addresses from 1 mnemonic phrase. Mnemonic phrase consists of 24 special words in defined order and can restore access to all generated addresses and private keys.<br/>Each address is identified by 3 main values:<ul><li>Private Key - your secret value, which should never be revealed</li><li>Public Key - public address to be published</li><li>Derivation index - index of generated address</li></ul></p><p>Tatum follows BIP44 specification and generates for Dogecoin wallet with derivation path m'/44'/3'/0'/0. More about BIP44 HD wallets can be found here - <a target="_blank" href="https://github.com/litecoin/bips/blob/master/bip-0044.mediawiki">https://github.com/litecoin/bips/blob/master/bip-0044.mediawiki</a>.
        Generate BIP44 compatible Dogecoin wallet.</p>
      operationId: DogeGenerateWallet
      summary: Generate Dogecoin wallet
      tags:
        - Account
      parameters:
        - description: Mnemonic to use for generation of extended public and private keys.
          in: query
          name: mnemonic
          required: false
          schema:
            type: string
            maxLength: 500
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request. Validation failed for the given object in the HTTP Body or Request parameters.
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Error401NotActive'
                  - $ref: '#/components/schemas/Error401Invalid'
          description: Unauthorized. Not valid or inactive subscription key present in the HTTP Header.
        '403':
          description: 'Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403BtcBlockchain'
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal server error. There was an error on the server while processing the request.
      security:
        - X-Api-Key: []
  '/v3/dogecoin/address/{xpub}/{index}':
    get:
      description: |
        <h4>1 credit per API call.</h4><br/>
        <p>Generate Dogecoin deposit address from Extended public key. Deposit address is generated for the specific index - each extended public key can generate
        up to 2^31 addresses starting from index 0 until 2^31 - 1.</p>
      operationId: DogeGenerateAddress
      summary: Generate Dogecoin deposit address from Extended public key
      tags:
        - Account
      parameters:
        - description: Extended public key of wallet.
          in: path
          name: xpub
          required: true
          example: xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid
          schema:
            type: string
        - description: Derivation index of desired address to be generated.
          in: path
          name: index
          required: true
          example: 0
          schema:
            type: number
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  address:
                    type: string
                    description: Dogecoin address
                    example: n36h3pAH7sC3z8KMB47BjbqvW2aJd2oTi7
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request. Validation failed for the given object in the HTTP Body or Request parameters.
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Error401NotActive'
                  - $ref: '#/components/schemas/Error401Invalid'
          description: Unauthorized. Not valid or inactive subscription key present in the HTTP Header.
        '403':
          description: 'Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.'
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Error403AccountIncompatibleXpubBtc'
                  - $ref: '#/components/schemas/Error403AccountAddressGeneral'
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal server error. There was an error on the server while processing the request.
      security:
        - X-Api-Key: []
  /v3/dogecoin/wallet/priv:
    post:
      description: |
        <h4>2 credits per API call.</h4><br/>
        <p>Generate private key for address from mnemonic for given derivation path index. Private key is generated for the specific index - each mnemonic
        can generate up to 2^32 private keys starting from index 0 until 2^31 - 1.</p>
      operationId: DogeGenerateAddressPrivateKey
      summary: Generate Dogecoin private key
      tags:
        - Account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrivKeyRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivKey'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request. Validation failed for the given object in the HTTP Body or Request parameters.
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Error401NotActive'
                  - $ref: '#/components/schemas/Error401Invalid'
          description: Unauthorized. Not valid or inactive subscription key present in the HTTP Header.
        '403':
          description: 'Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403BlockchainPrivateFailed'
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal server error. There was an error on the server while processing the request.
      security:
        - X-Api-Key: []
  /v3/dogecoin/info:
    get:
      description: '<h4>1 credit per API call.</h4><br/><p>Get Dogecoin Blockchain Information. Obtain basic info like testnet / mainnet version of the chain, current block number and it''s hash.</p>'
      operationId: DogeGetBlockChainInfo
      summary: Get Dogecoin Blockchain Information
      tags:
        - Block
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DogeInfo'
          description: OK
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Error401NotActive'
                  - $ref: '#/components/schemas/Error401Invalid'
          description: Unauthorized. Not valid or inactive subscription key present in the HTTP Header.
        '403':
          description: 'Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403BtcBlockchain'
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal server error. There was an error on the server while processing the request.
      security:
        - X-Api-Key: []
  '/v3/dogecoin/block/hash/{i}':
    get:
      description: <h4>1 credit per API call.</h4><br/><p>Get Dogecoin Block hash. Returns hash of the block to get the block detail.</p>
      operationId: DogeGetBlockHash
      summary: Get Dogecoin Block hash
      tags:
        - Block
      parameters:
        - description: The number of blocks preceding a particular block on a block chain.
          in: path
          name: i
          required: true
          schema:
            type: number
            example: 1234314
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  hash:
                    type: string
                    description: Block hash
                    example: 6178dda07b94becb118f67b21aa72f60d85c1029e9e9b8ae56a25d684de66078
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request. Validation failed for the given object in the HTTP Body or Request parameters.
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Error401NotActive'
                  - $ref: '#/components/schemas/Error401Invalid'
          description: Unauthorized. Not valid or inactive subscription key present in the HTTP Header.
        '403':
          description: 'Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403BtcBlockchain'
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal server error. There was an error on the server while processing the request.
      security:
        - X-Api-Key: []
  '/v3/dogecoin/block/{hash}':
    get:
      description: <h4>1 credit per API call.</h4><br/><p>Get Dogecoin Block detail by block hash or height.</p>
      operationId: DogeGetBlock
      summary: Get Dogecoin Block by hash or height
      tags:
        - Block
      parameters:
        - description: Block hash or height.
          in: path
          name: hash
          required: true
          schema:
            type: string
            example: '1234314'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DogeBlock'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request. Validation failed for the given object in the HTTP Body or Request parameters.
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Error401NotActive'
                  - $ref: '#/components/schemas/Error401Invalid'
          description: Unauthorized. Not valid or inactive subscription key present in the HTTP Header.
        '403':
          description: 'Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403BlockNotExists'
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal server error. There was an error on the server while processing the request.
      security:
        - X-Api-Key: []
  '/v3/dogecoin/transaction/{hash}':
    get:
      description: <h4>1 credit per API call.</h4><br/><p>Get Dogecoin Transaction detail by transaction hash.</p>
      operationId: DogeGetRawTransaction
      summary: Get Dogecoin Transaction by hash
      tags:
        - Transaction
      parameters:
        - description: Transaction hash
          in: path
          name: hash
          required: true
          schema:
            type: string
            example: d60631d8e5c8b6eb0557b5181cf28564d771c628a08abc414e87ad7c05ff2fc2
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DogeTx'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request. Validation failed for the given object in the HTTP Body or Request parameters.
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Error401NotActive'
                  - $ref: '#/components/schemas/Error401Invalid'
          description: Unauthorized. Not valid or inactive subscription key present in the HTTP Header.
        '403':
          description: 'Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.'
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Error403BtcBlockchain'
                  - $ref: '#/components/schemas/Error403TxNotFound'
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal server error. There was an error on the server while processing the request.
      security:
        - X-Api-Key: []
  /v3/dogecoin/mempool:
    get:
      description: <h4>1 credit per API call.</h4><br/><p>Get Dogecoin Transaction ids in the mempool.</p>
      operationId: DogeGetMempool
      summary: Get Dogecoin mempool transactions
      tags:
        - Transaction
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  description: TX ID of the transaction in mempool
                  example: 4c7846a8ff8415945e96937dea27bdb3144c15d793648d725602784826052586
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request. Validation failed for the given object in the HTTP Body or Request parameters.
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Error401NotActive'
                  - $ref: '#/components/schemas/Error401Invalid'
          description: Unauthorized. Not valid or inactive subscription key present in the HTTP Header.
        '403':
          description: 'Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.'
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Error403BtcBlockchain'
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal server error. There was an error on the server while processing the request.
      security:
        - X-Api-Key: []
  '/v3/dogecoin/utxo/{hash}/{index}':
    get:
      description: |
        <h4>1 credit per API call.</h4><br/>
        <p>Get UTXO of given transaction and output index. UTXO means Unspent Transaction Output, which is in blockchain terminology assets, that user
        received on the specific address and does not spend it yet.<br/>
        In bitcoin-like blockchains (BTC, LTC, DOGE, BCH), every transaction is built from the list of previously
         not spent transactions connected to the address. If user owns address A, receives in transaciont T1 10 DOGE, he can spend in the next transaction
        UTXO T1 of total value 10 DOGE. User can spend multiple UTXOs from different addresses in 1 transaction.<br/>
        If UTXO is not spent, data are returned, otherwise 404 error code.</p>
      operationId: DogeGetUTXO
      summary: Get Dogecoin UTXO of Transaction
      tags:
        - Transaction
      parameters:
        - description: TX Hash
          in: path
          name: hash
          required: true
          schema:
            type: string
            minLength: 64
            maxLength: 64
            example: 5f83d51c8d3054012cea3011fa626b85d89442788721afd60719ab1f9ab8f78a
        - description: Index of tx output to check if spent or not
          in: path
          name: index
          required: true
          schema:
            type: number
            example: 0
            minimum: 0
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DogeUTXO'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request. Validation failed for the given object in the HTTP Body or Request parameters.
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Error401NotActive'
                  - $ref: '#/components/schemas/Error401Invalid'
          description: Unauthorized. Not valid or inactive subscription key present in the HTTP Header.
        '403':
          description: 'Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403BtcUTXO'
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal server error. There was an error on the server while processing the request.
      security:
        - X-Api-Key: []
  /v3/dogecoin/transaction:
    post:
      description: |
        <h4>2 credits per API call.</h4><br/>
        <p>Send Dogecoin to blockchain addresses. It is possible to build a blockchain transaction in 1 way:
        <ul>
        <li><b>fromUTXO</b> - assets will be sent from the list of unspent UTXOs. Each of the UTXO will be included in the transaction.</li>
        </ul>
        In bitcoin-like blockchains, the transaction is created from the list of previously not spent UTXO. Every UTXO contains the number of funds, which can be spent.
        When the UTXO enters into the transaction, the whole amount is included and must be spent. For example, address A receives 2 transactions, T1 with 1 DOGE and T2 with 2 DOGE.
        The transaction, which will consume UTXOs for T1 and T2, will have available amount to spent 3 DOGE = 1 DOGE (T1) + 2 DOGE(T2).<br/><br/>
        There can be multiple recipients of the transactions, not only one. In the <b>to</b> section, every recipient address has it's corresponding amount.
        When the amount of funds, that should receive the recipient is lower than the number of funds from the UTXOs, the difference is sent to the change address.<br/><br/>
        This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key.
        No one should ever send it's own private keys to the internet because there is a strong possibility of stealing keys and losing funds. In this method, it is possible to enter privateKey
        or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production,
        <a href="https://github.com/tatumio/tatum-kms" target="_blank">Tatum KMS</a> should be used for the highest security standards, and signatureId should be present in the request.
        Alternatively, using the Tatum client library for supported languages.
        </p>
      operationId: DogeTransferBlockchain
      summary: Send Dogecoin to blockchain addresses
      tags:
        - Transaction
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/DogeTransactionUTXO'
                - $ref: '#/components/schemas/DogeTransactionUTXOKMS'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/TransactionHashKMS'
                  - $ref: '#/components/schemas/SignatureId'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request. Validation failed for the given object in the HTTP Body or Request parameters.
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Error401NotActive'
                  - $ref: '#/components/schemas/Error401Invalid'
          description: Unauthorized. Not valid or inactive subscription key present in the HTTP Header.
        '403':
          description: 'Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.'
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Error403BtcTx'
                  - $ref: '#/components/schemas/Error403BtcBlockchain'
                  - $ref: '#/components/schemas/Error403BtcUTXO'
                  - $ref: '#/components/schemas/Error403Broadcast'
                  - $ref: '#/components/schemas/Error403BtcTxFailed'
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal server error. There was an error on the server while processing the request.
      security:
        - X-Api-Key: []
  /v3/dogecoin/broadcast:
    post:
      description: |
        <h4>2 credits per API call.</h4><br/>
        <p>Broadcast signed transaction to Dogecoin blockchain. This method is used internally from Tatum KMS, Tatum Middleware or Tatum client libraries.
        It is possible to create custom signing mechanism and use this method only for broadcasting data to the blockchian.</p>
      operationId: DogeBroadcast
      summary: Broadcast signed Dogecoin transaction
      tags:
        - Transaction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BroadcastKMS'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionHashKMS'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request. Validation failed for the given object in the HTTP Body or Request parameters.
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Error401NotActive'
                  - $ref: '#/components/schemas/Error401Invalid'
          description: Unauthorized. Not valid or inactive subscription key present in the HTTP Header.
        '403':
          description: 'Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.'
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Error403BtcBlockchain'
                  - $ref: '#/components/schemas/Error403Broadcast'
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal server error. There was an error on the server while processing the request.
      security:
        - X-Api-Key: []
  /v3/dogecoin/node:
    post:
      description: |
        <h4>2 credits per API call.</h4><br/>
        Use this endpoint URL as an http-based JSON RPC driver to connect directly to the node provided by Tatum. <br/>
        To learn more about JSON RPC, please visit <a href=\"https://developer.bitcoin.org/reference/rpc/index.html\" target=\"_blank\">Bitcoin developers' guide.</a>
      operationId: BzcRpcDriver
      summary: Dogecoin RPC node
      tags:
        - Transaction
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: Any valid JSON RPC method content body. description.
              properties:
                jsonrpc:
                  type: integer
                  description: Version of the JSON RPC.
                  example: 1.0
                id:
                  type: string
                  description: ID of the request, could be any arbitrary identifier.
                  example: "test"
                method:
                  type: string
                  description: "Method to invoke on the note."
                  example: "getblockcount"
                params:
                    type: array
                    description: "Params to the method call, if required."
                    example: []
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                description: "Any valid RPC response."
                example:
                  jsonrpc: 1.0
                  id: "test"
                  result: 654321
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request. Validation failed for the given object in the HTTP Body or Request parameters.
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Error401NotActive'
                  - $ref: '#/components/schemas/Error401Invalid'
          description: Unauthorized. Not valid or inactive subscription key present in the HTTP Header.
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal server error. There was an error on the server while processing the request.
      security:
        - X-Api-Key: []
components:
  schemas:
    BroadcastKMS:
      properties:
        txData:
          description: Raw signed transaction to be published to network.
          example: 62BD544D1B9031EFC330A3E855CC3A0D51CA5131455C1AB3BCAC6D243F65460D
          maxLength: 500000
          minLength: 1
          type: string
        signatureId:
          description: 'ID of prepared payment template to sign. Required only, when broadcasting transaction signed by Tatum KMS.'
          format: uuid
          example: 1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6
          type: string
          minLength: 36
          maxLength: 36
      required:
        - txData
      type: object
    DogeInfo:
      type: object
      properties:
        chain:
          type: string
          description: 'Chain of the blockchain, main or test.'
          example: test
        blocks:
          type: number
          description: Last block.
          example: 1234314
        headers:
          type: number
          description: Last headers.
          example: 1234314
        bestblockhash:
          type: string
          description: Hash of the last block.
          example: 6178dda07b94becb118f67b21aa72f60d85c1029e9e9b8ae56a25d684de66078
        difficulty:
          type: number
          description: Difficulty of the PoW algorithm.
          example: 0.0018856935093586335
    DogeBlock:
      type: object
      properties:
        hash:
          type: string
          description: Hash of block.
          example: 6178dda07b94becb118f67b21aa72f60d85c1029e9e9b8ae56a25d684de66078
        height:
          type: number
          description: The number of blocks preceding a particular block on a block chain.
          example: 1234314
        size:
          type: number
          description: The size of the block.
          example: 1234314
        confirmations:
          type: number
          description: Number of confirmations of that block.
          example: 1234314
        weight:
          type: number
          description: The weight of the block.
          example: 1234314
        version:
          type: number
          example: 536870912
          description: Block version.
        previousblockhash:
          type: string
          description: Hash of the previous block.
          example: a3047a060e5d586a9b26779ebe62fc57ce7323745da8f28761ab755454d89c52
        merkleRoot:
          type: string
          description: 'The root node of a merkle tree, a descendant of all the hashed pairs in the tree.'
          example: a1634a42a8e956a5fb5225d06c3af6207e7f6fe5a00fa45229edfd0ddfa587f0
        time:
          type: number
          description: Time of the block.
          example: 1572865501
        bits:
          type: number
          example: 503452237
        nonce:
          type: number
          description: Arbitrary number that is used in Litecoin's proof of work consensus algorithm.
          example: 2278594841
        txs:
          type: array
          items:
            $ref: '#/components/schemas/DogeTx'
    DogeTx:
      type: object
      properties:
        hash:
          type: string
          description: Transaction hash.
          example: 5f83d51c8d3054012cea3011fa626b85d89442788721afd60719ab1f9ab8f78a
        size:
          type: number
          description: Size of the transaction.
          example: 145
        vsize:
          type: number
          example: 145
        version:
          type: number
          description: Index of the transaction.
          example: 2
        vin:
          description: 'List of transactions, from which assets are being sent.'
          type: array
          items:
            type: object
            properties:
              txid:
                type: string
                description: Transaction hash of the input.
                example: 0db5a2881f26f7dce20222f9c2538dc296ab562e134a72052596bdf4bb6913b4
              vout:
                type: number
                description: Transaction index of the input.
                example: 1
              scriptSig:
                type: object
                properties:
                  asm:
                    type: string
                  hex:
                    type: string
              sequence:
                type: number
                example: 4294967294
        vout:
          description: List of recipient addresses and amounts to send to each of them.
          type: array
          items:
            type: object
            properties:
              value:
                type: number
                description: Amount of UTXO in 1/1000000 DOGE.
                example: 1000
              'n':
                type: number
                description: Transaction index of the output.
                example: 1
              scriptPubKey:
                type: object
                properties:
                  asm:
                    type: string
                    example: OP_HASH160 905c261d73922a21a16f505cefccaa07aaee50cd OP_EQUAL
                  hex:
                    type: string
                    example: a914905c261d73922a21a16f505cefccaa07aaee50cd87
                  type:
                    type: string
                    example: scripthash
                  addresses:
                    type: array
                    items:
                      type: string
                      description: Recipient address.
                      example: n4YNG8q5JyxkeWf7zMi1bMyRZbRKK1W7or
        locktime:
          type: number
          example: 1233222
    DogeUTXO:
      type: object
      properties:
        scriptPubKey:
          type: object
          properties:
            asm:
              type: string
              example: OP_HASH160 905c261d73922a21a16f505cefccaa07aaee50cd OP_EQUAL
            hex:
              type: string
              example: a914905c261d73922a21a16f505cefccaa07aaee50cd87
            type:
              type: string
              example: scripthash
            addresses:
              type: array
              items:
                type: string
                description: Recipient address.
                example: n4YNG8q5JyxkeWf7zMi1bMyRZbRKK1W7or
        version:
          type: number
          description: Version of the UTXO.
          example: 2
        height:
          type: number
          example: 1233224
        value:
          type: number
          description: Amount of UTXO in 1/1000000 DOGE.
          example: 1000
        coinbase:
          type: boolean
          description: Coinbase transaction - miner fee.
          example: false
        bestblock:
          type: string
          description: Block hash.
          example: 5f83d51c8d3054012cea3011fa626b85d89442788721afd60719ab1f9ab8f78a
    DogeTransactionUTXOKMS:
      type: object
      title: UTXO + Signature
      required:
        - to
        - fromUTXO
      properties:
        fromUTXO:
          description: 'Array of transaction hashes, index of UTXO in it and corresponding private keys. Use this option if you want to calculate amount to send manually. Either fromUTXO or fromAddress must be present.'
          type: array
          items:
            type: object
            required:
              - txHash
              - value
              - address
              - index
              - signatureId
            properties:
              txHash:
                description: Transaction hash of the UTXO to be spent.
                type: string
                example: 53faa103e8217e1520f5149a4e8c84aeb58e55bdab11164a95e69a8ca50f8fcc
                minLength: 64
                maxLength: 64
              value:
                type: string
                description: Sent amount in DOGE.
                example: '0.0015'
              address:
                description: Receiving address.
                type: string
                example: 2MzNGwuKvMEvKMQogtgzSqJcH2UW3Tc5oc7
                minimum: 30
                maximum: 60
              index:
                description: Index of the UTXO to be spent.
                type: number
                example: 0
                minimum: 0
                maximum: 2147483647
              signatureId:
                type: string
                minimum: 36
                maximum: 36
                format: uuid
                example: 1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6
                description: 'Identifier of the private key associated in signing application. Private key, or signature Id must be present.'
        to:
          description: Array of addresses and values to send Litecoins to. Values must be set in LTC. Difference between from and to is transaction fee.
          type: array
          items:
            type: object
            required:
              - address
              - value
            properties:
              address:
                description: Destination address.
                type: string
                example: 2MzNGwuKvMEvKMQogtgzSqJcH2UW3Tc5oc7
                minimum: 30
                maximum: 60
              value:
                description: 'Amount to be sent, in DOGE.'
                type: number
                minimum: 0
                example: 0.02969944
        fee:
          type: string
          description: Fee to be paid in DOGE.
          example: '0.0015'
        changeAddress:
          description: 'Address, where unspent funds will be transferred.'
          type: string
          example: 2MzNGwuKvMEvKMQogtgzSqJcH2UW3Tc5oc7
          minimum: 30
          maximum: 60
    DogeTransactionUTXO:
      type: object
      title: UTXO
      required:
        - to
        - fromUTXO
        - fee
        - changeAddress
      properties:
        fee:
          type: string
          description: Fee to be paid in DOGE.
          example: '0.0015'
        changeAddress:
          description: 'Address, where unspent funds will be transferred.'
          type: string
          example: 2MzNGwuKvMEvKMQogtgzSqJcH2UW3Tc5oc7
          minimum: 30
          maximum: 60
        fromUTXO:
          description: 'Array of transaction hashes, index of UTXO in it and corresponding private keys. Use this option if you want to calculate amount to send manually. Either fromUTXO or fromAddress must be present.'
          type: array
          items:
            type: object
            required:
              - txHash
              - index
              - privateKey
              - value
              - address
            properties:
              txHash:
                description: Transaction hash of the UTXO to be spent.
                type: string
                example: 53faa103e8217e1520f5149a4e8c84aeb58e55bdab11164a95e69a8ca50f8fcc
                minLength: 64
                maxLength: 64
              value:
                type: string
                description: Sent amount in DOGE.
                example: '0.0015'
              address:
                description: Receiving address.
                type: string
                example: 2MzNGwuKvMEvKMQogtgzSqJcH2UW3Tc5oc7
                minimum: 30
                maximum: 60
              index:
                description: Index of the UTXO to be spent.
                type: number
                example: 0
                minimum: 0
                maximum: 2147483647
              privateKey:
                description: 'Private key of the UTXO to be spent. Private key, or signature Id must be present.'
                type: string
                example: cVX7YtgL5muLTPncHFhP95oitV1mqUUA5VeSn8HeCRJbPqipzobf
                minLength: 52
                maxLength: 52
        to:
          description: Array of addresses and values to send Litecoins to. Values must be set in LTC. Difference between from and to is transaction fee.
          type: array
          items:
            type: object
            required:
              - address
              - value
            properties:
              address:
                description: Destination address.
                type: string
                example: 2MzNGwuKvMEvKMQogtgzSqJcH2UW3Tc5oc7
                minimum: 30
                maximum: 60
              value:
                description: 'Amount to be sent, in DOGE.'
                type: number
                minimum: 0
                example: 0.02969944
    PrivKey:
      type: object
      properties:
        key:
          description: Generated private key.
          example: cTmS2jBWXgFaXZ2xG9jhn67TiyTshnMp3UedamzEhGm6BZV1vLgQ
          type: string
    PrivKeyRequest:
      type: object
      properties:
        index:
          description: Derivation index of private key to generate.
          example: 0
          maximum: 2147483647
          type: integer
        mnemonic:
          maxLength: 500
          minLength: 1
          description: Mnemonic to generate private key from.
          example: urge pulp usage sister evidence arrest palm math please chief egg abuse
          type: string
      required:
        - mnemonic
        - index
    SignatureId:
      type: object
      title: SignatureId
      properties:
        signatureId:
          format: uuid
          description: 'ID of prepared payment template to sign. This is should be stored on a client side to retrieve ID of the blockchain transaction, when signing application signs the transaction and broadcasts it to the blockchain.'
          example: 1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6
          type: string
      required:
        - signatureId
    TransactionHashKMS:
      type: object
      title: TransactionHashKMS
      properties:
        txId:
          description: TX hash of successful transaction.
          example: c83f8818db43d9ba4accfe454aa44fc33123d47a4f89d47b314d6748eb0e9bc9
          type: string
        failed:
          description: 'In case of the transaction was broadcast to the blockchain, but it was not possible to complete Tatum KMS signature, reponse is marked as failed and must be marked manually.'
          example: false
          type: boolean
      required:
        - txId
    Wallet:
      type: object
      properties:
        address:
          maxLength: 58
          minLength: 58
          description: address of Algorand account.
          example: NTAESFCB3WOD7SAOL42KSPVARLB3JFA3MNX3AESWHYVT2RMYDVZI6YLG4Y
          type: string
        secret:
          maxLength: 103
          minLength: 103
          description: 'secretKey can generate Mnemonic, similar to private Key.'
          type: string
          example: NBYMCVEEDFYV3TPWVRE6APE7PKHUJD4XAKXCKNCLKGUXOC3LFNJGZQCJCRA53HB7ZAHF6NFJH2QIVQ5USQNWG35QCJLD4KZ5IWMB24Q
    Error400:
      properties:
        errorCode:
          example: validation.failed
          description: validation.failed
          type: string
        message:
          example: Request validation failed. Please see data for additional information.
          description: Request validation failed. Please see data for additional information.
          type: string
        statusCode:
          example: 400
          description: '400'
          type: number
        data:
          type: array
          items:
            type: object
            required:
              - target
            properties:
              target:
                type: object
                additionalProperties: true
                description: Request object present in the body of the HTTP request
              value:
                type: number
                description: 'Value of the target object which validation is wrong. Can be of any data type, example here is using type number.'
                example: 12345
              property:
                type: string
                description: Property name of the target object which validation is wrong
                example: fromPrivateKey
              constraints:
                type: object
                additionalProperties: true
                description: 'Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.'
                example:
                  isNotEmpty: fromPrivateKey should not be empty
    Error401Invalid:
      properties:
        errorCode:
          example: subscription.invalid
          description: subscription.invalid
          type: string
        message:
          example: 'Unable to find valid subscription for ''${apiKey}'''
          description: 'Unable to find valid subscription for ''${apiKey}'''
          type: string
        statusCode:
          example: 401
          description: '401'
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error401NotActive:
      properties:
        errorCode:
          example: subscription.not.active
          description: subscription.not.active
          type: string
        message:
          example: Subscription not active anymore.
          description: Subscription not active anymore.
          type: string
        statusCode:
          example: 401
          description: '401'
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403AccountIncompatibleXpubBtc:
      properties:
        errorCode:
          description: Address.generation.failed.wrong.xpub
          example: address.generation.failed.wrong.xpub
          type: string
        message:
          description: 'Unable to generate address, wrong xpub and account type.'
          example: 'Unable to generate address, wrong xpub and account type.'
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403AccountAddressGeneral:
      properties:
        errorCode:
          description: Address.generation.failed
          example: address.generation.failed
          type: string
        message:
          description: Unable to generate address.
          example: Unable to generate address.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403BtcBlockchain:
      properties:
        errorCode:
          description: blockchain.error.code
          example: blockchain.error.code
          type: string
        message:
          description: '${error.message} Code: ${error.code}'
          example: '${error.message} Code: ${error.code}'
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403BtcTxFailed:
      properties:
        errorCode:
          description: transaction.failed
          example: transaction.failed
          type: string
        message:
          description: No spendable inputs.
          example: No spendable inputs.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403BtcTx:
      properties:
        errorCode:
          description: transaction.invalid.body
          example: transaction.invalid.body
          type: string
        message:
          description: 'Either UTXO, or addresses must be present.'
          example: 'Either UTXO, or addresses must be present.'
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403BlockNotExists:
      properties:
        errorCode:
          description: block.hash.not.exists
          example: block.hash.not.exists
          type: string
        message:
          description: No such block.
          example: No such block.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403BlockchainPrivateFailed:
      properties:
        errorCode:
          description: key.generation.failed.wrong.mnemonic
          example: key.generation.failed.wrong.mnemonic
          type: string
        message:
          description: 'Unable to generate address, wrong mnemonic and index.'
          example: 'Unable to generate address, wrong mnemonic and index.'
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403Broadcast:
      properties:
        errorCode:
          description: blockchain.broadcast.error
          example: blockchain.broadcast.error
          type: string
        message:
          description: 'Unable to broadcast transaction, wrong input data.'
          example: 'Unable to broadcast transaction, wrong input data.'
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403TxNotFound:
      properties:
        errorCode:
          description: tx.missing
          example: tx.missing
          type: string
        message:
          description: No such tx.
          example: No such tx.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403BtcUTXO:
      properties:
        errorCode:
          description: tx.hash.index.spent
          example: tx.hash.index.spent
          type: string
        message:
          description: No such UTXO for transaction and index.
          example: No such UTXO for transaction and index.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error500:
      properties:
        message:
          example: Internal server error
          description: Internal server error
          type: string
        statusCode:
          example: 500
          description: '500'
          type: number
        errorCode:
          example: internal.error
          description: Internal server error
          type: string
      required:
        - statusCode
        - message
      type: object
  securitySchemes:
    X-Api-Key:
      description: |
        To maintain the highest security level, Tatum requires X-API-Key HTTP header.
        This X-API-Key represents identification of the plan and can be used by 1 developer or per environment.
        Each X-API-Key is bound to the test or production blockchains.
      in: header
      name: x-api-key
      type: apiKey
